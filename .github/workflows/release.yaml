name: Release

on:
  push:

jobs:
  scrape-song-list:
    name: Scrape USDB song list
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install poetry
        run: |
          python -m pip install poetry
      - name: Install dependencies
        run: |
          poetry install --without dev --without build
      - name: Scrape USDB song list to ship with the bundle
        run: >
          poetry run generate_song_list_json
          -t 'song_list.json'
          -u '${{ secrets.USDB_USER }}'
          -p '${{ secrets.USDB_PASSWORD }}'
      - uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            song_list.json
            CHANGELOG.md

  build:
    name: Build packages
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.image }}
    needs: scrape-song-list
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            image: quay.io/pypa/manylinux_2_34_x86_64
            TARGET: Linux
            PYINSTALLER_ARGS: >-
              --onefile
              --add-data 'artifacts/song_list.json:data'
              --add-data 'src/usdb_syncer/db/sql:src/usdb_syncer/db/sql'
          - os: macos-latest
            TARGET: macOS-arm64
            PYINSTALLER_ARGS: >-
              --windowed
              --icon src/usdb_syncer/gui/resources/appicon_128x128.png
              --add-data 'artifacts/song_list.json:data'
              --add-data 'src/usdb_syncer/db/sql:src/usdb_syncer/db/sql'
          - os: macos-13
            TARGET: macOS-x64
            PYINSTALLER_ARGS: >-
              --windowed
              --icon src/usdb_syncer/gui/resources/appicon_128x128.png
              --add-data 'artifacts/song_list.json:data'
              --add-data 'src/usdb_syncer/db/sql:src/usdb_syncer/db/sql'
          - os: windows-latest
            TARGET: Windows
            PYINSTALLER_ARGS: >-
              --onefile
              --icon src/usdb_syncer/gui/resources/appicon_128x128.png
              --add-data 'artifacts/song_list.json;data'
              --add-data 'src/usdb_syncer/db/sql;src/usdb_syncer/db/sql'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: On macOS and windows, install python normally
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'windows')
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.9"
      - name: Build Python 3.12.9 on linux using pyenv
        if: contains(matrix.os, 'ubuntu')
        run: |
          yum update -y
          yum groupinstall 'Development Tools' -y
          yum install gcc make patch zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel libffi-devel xz-devel curl -y
          
          curl -fsSL https://pyenv.run | bash

          env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' pyenv install 3.12.9
          pyenv global 3.12.9
          pyenv rehash

          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
          echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
          echo 'eval "$(pyenv init --path)"' >> ~/.bashrc

          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
          echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
          echo 'eval "$(pyenv init - bash)"' >> ~/.bash_profile
      - name: Install poetry
        run: |
          python -m pip install poetry
      - name: Install dependencies
        run: |
          poetry install --without dev
      - name: Write version and commit hash
        run: >
          poetry run write_release_info
          -p src/usdb_syncer/constants.py
          -v 0.11.0
          -c ${{ github.workflow_sha }}
      - name: Generate GUI elements
        run: poetry run generate_pyside_files
      - name: Build with pyinstaller for ${{matrix.os}}
        # _tkinter hook is run erroneously?
        run: >
          poetry run pyinstaller
          -n 'USDB_Syncer-0.11.0-${{matrix.TARGET}}'
          --exclude-module _tkinter
          ${{matrix.PYINSTALLER_ARGS}}
          src/usdb_syncer/gui/__init__.py
      - name: Create DMG
        if: contains(matrix.TARGET, 'macOS')
        run: |
          brew install create-dmg
          create-dmg \
            --volname "USDB Syncer" \
            --volicon "src/usdb_syncer/gui/resources/appicon_128x128.png" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 128 \
            --text-size 14 \
            --icon "USDB_Syncer-0.11.0-${{matrix.TARGET}}.app" 175 120 \
            --hide-extension "USDB_Syncer-0.11.0-${{matrix.TARGET}}.app" \
            --app-drop-link 425 120 \
            --hdiutil-quiet \
            --no-internet-enable \
            "dist/USDB_Syncer-0.11.0-${{matrix.TARGET}}.dmg" \
            "dist/USDB_Syncer-0.11.0-${{matrix.TARGET}}.app"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*Linux
            dist/*.dmg
            dist/*.exe

  release:
    name: Create release
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: "Mock release"
        run: echo "Mock release"
